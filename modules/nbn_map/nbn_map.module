<?php
/**
 * @file
 * Defines a formatter for the taxon formatters module that can display NBN
 * Gateway maps.
 */

/**
 * Implements hook_taxon_formatter_types().
*/
function nbn_map_taxon_formatter_types() {
  $formatter = array(
    'nbn_map' => array(
      'title' => t('NBN Map'),
      // Field type is tvk, tlick or brc (+GBIF?).
      'field_type' => 'tvk',
      // Function that generates the form using Forms API, with arguments for
      // the current settings values, type name (e.g. nbn_map) and optional
      // $args.
      'form_callback' => 'nbn_map_taxon_formatter_settings_form',
      // Can be used to pass arguments to the form.
      'form_args' => array(),
    ),
  );
  return $formatter;
}

/**
 * This defines the drupal form used for the settings of this formatter type.
 */
function nbn_map_taxon_formatter_settings_form($settings, $type, $args) {
  if ($type == 'nbn_map') {
    // Apply some defaults.
    $settings = array_merge(array(
      'width' => 270,
      'height' => 390,
      'zoom' => '0',
      'vc' => '',
      'title' => 'sci',
      'terms' => true,
      'link' => true,
      'ref' => true,
      'logo' => true,
      'border' => true,
    ), $settings);
    $form = array();
    // @todo validate width and height.
    $form['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width (px)'),
      '#description' => t('Width of the iframe containing the map in pixels.'),
      '#required' => TRUE,
      '#default_value' => $settings['width'],
    );
    $form['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height (px)'),
      '#description' => t('Height of iframe containing the map in pixels.'),
      '#required' => TRUE,
      '#default_value' => $settings['height'],
    );
    $form['datasets'] = array(
      '#type' => 'textarea',
      '#title' => t('Datasets'),
      '#description' => t('List the keys of the datasets to restrict the query to one per line, or leave blank for no dataset filter.'),
      '#default_value' => $settings['datasets'],
      '#wysiwyg' => FALSE,
    );
    $form['bands'] = array(
      '#type' => 'textarea',
      '#title' => t('Display Bands'),
      '#description' => t('List display bands one per line to define the fill and border colour of the output by date '
              . 'range, or leave blank for just the default band. Each band line consists of a comma separated list of '
              . 'the settings (from, to, and fill). The from and to values are 4 digit years, the fill and border '
              . 'values are RGB colour codes. For example "from=1980,to=1990,fill=FF0000". The first in the list is '
              . 'the bottom layer.'),
      '#default_value' => $settings['bands'],
      '#wysiwyg' => FALSE,
    );
    $form['zoom'] = array(
      '#type' => 'select',
      '#title' => t('Region'),
      '#description' => t('Zoom the map to a region.'),
      '#options' => array(
        '0' => 'No zoom - all of UK',
        'england' => 'England',
        'scotland' => 'Scotland',
        'wales' => 'Wales',
        'highland' => 'Scottish highlands',     
        'sco-mainland' => 'Scottish mainland',
        'outer-heb' => 'Outer Hebrides',
      ),
      '#default_value' => $settings['zoom'],
    );
    $form['vc'] = array(
      '#type' => 'textfield',
      '#title' => t('Vice County Number'),
      '#description' => t('Select a vice county number to zoom the map to, or leave blank. ' .
          'Set the Region to No zoom and the Background to Vice County Boundaries.'),
      '#default_value' => $settings['vc'],
      '#wysiwyg' => FALSE,
    );
    $form['resolution'] = array(
      '#type' => 'select',
      '#title' => t('Resolution'),
      '#description' => t('Displayed square size for distribution points.'),
      '#options' => array(
        '10km' => '10km',
        '2km' => '2km',
      ),
      '#default_value' => $settings['resolution'],
    );
    $form['background'] = array(
      '#type' => 'select',
      '#title' => t('Background'),
      '#description' => t('Select the background layer to display.'),
      '#options' => array(
        'Coast' => 'Coastal outline.',
        'ViceCounty' => 'Watsonian vice county boundaries.',
      ),
      '#default_value' => $settings['background'],
    );
     $form['title'] = array(
      '#type' => 'select',
      '#title' => t('Title'),
      '#description' => t('Select how to display the species name.'),
      '#options' => array(
        'sci' => 'Scientific name.',
        'com' => 'Common name.',
        '0' => 'Hide name.',
      ),
      '#default_value' => $settings['title'],
    );
     $form['terms'] = array(
      '#type' => 'checkbox',
      '#title' => t('Terms'),
      '#description' => t('Ensables the terms and conditions link and text above the map.'),
      '#default_value' => $settings['terms'],
    );
     $form['link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Link'),
      '#description' => t('Ensables the link to the NBN Atlas interactive map.'),
      '#default_value' => $settings['link'],
    );
     $form['ref'] = array(
      '#type' => 'checkbox',
      '#title' => t('Acknowledgements'),
      '#description' => t('Ensables the list of datasets.'),
      '#default_value' => $settings['ref'],
    );
     $form['logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Logo'),
      '#description' => t('Ensables the NBN logo.'),
      '#default_value' => $settings['logo'],
    );
     $form['border'] = array(
      '#type' => 'checkbox',
      '#title' => t('Border'),
      '#description' => t('Ensables the iframe border.'),
      '#default_value' => $settings['border'],
    );
 }
  return $form;
}

/**
 * Implements the output theme function.
 */
function theme_nbn_map_taxon_formatter_output($params) {
  $item = $params['item'];
  $preset = $params['preset'];
  // Return nothing if no TVK.
  $tvk = trim($item['value']);
  if (empty($tvk)) {
    return '';
  }

  $url = nbn_map_build_query($tvk, $preset);
  
  $args = array(
    'image_path' => $url,
    'preset' => $preset);
  return theme('nbn_map_output', $args);
}

/**
 * Theme function that creates the final map output with NBN attribution.
 */
function theme_nbn_map_output($args) {
  $image_path = $args['image_path'];
  $preset = $args['preset'];
  $result = '<iframe '
          . 'width="' . $preset['settings']['width'] . '" ' 
          . 'height="' . $preset['settings']['height'] . '" '
          . 'src="' . $image_path . '" '
          . 'style="' . (($preset['settings']['border']) ? '' : 'border:none;')  . '"></iframe>';
  return $result;  
}

/**
 * Implements hook_theme().
 */
function nbn_map_theme() {
  $theme = array();
  $theme["nbn_map_taxon_formatter_output"] = array(
      'arguments' => array('element' => NULL),
  );
  $theme["nbn_map_output"] = array(
      'arguments' => array('element' => NULL),
  );
  return $theme;
}

/**
 * Internal method to create the url required for a web service request.
 */
function nbn_map_build_query($tvk, $preset) {
  $url = "https://easymap.nbnatlas.org/EasyMap";
  $query = "?tvk=$tvk";

  // Size. The map width is reduced by the size of the margins on the contained <body> (16px) plus the width of a 
  // vertical scroll bar (17px on Win/Firefox) to eliminate a horizontal scroll bar. 
  // The map height is not set to ensure the correct aspect ratio.
  $query .= '&w=' . ($preset['settings']['width'] - 33);

  // Resolution. Only 10km and 2km options offered.
  if($preset['settings']['resolution'] == '2km') {
    $query .= '&res=2km';  
  }
  
  // Background.
  if($preset['settings']['background'] == 'ViceCounty') {
    $query .= '&bg=vc';  
  }

  // Datasets.
  if (!empty($preset['settings']['datasets'])) {    
    // split the dataset definitions up by line, allowing for different line
    // endings.
    $datasets = str_replace("\r\n", "\n", $preset['settings']['datasets']);
    $datasets = str_replace("\r", "\n", $datasets);
    $datasets = explode("\n", $datasets);
    if (count($datasets) > 0) {      
      // clean the dataset keys
      foreach($datasets as &$dataset) {     
        $dataset = preg_replace("[^A-Z0-9]", "", $dataset);
      }
      $query .= '&ds=' . implode(',', $datasets);
    }
  }
  
  // Date bands.
  $this_year = date('Y');
  if (!empty($preset['settings']['bands'])) {
    // split the band definitions up by line, allowing for different line
    // endings.
    $bands = str_replace("\r\n", "\n", $preset['settings']['bands']);
    $bands = str_replace("\r", "\n", $bands);
    $bands = explode("\n", $bands);    
    if (count($bands) > 0) {
      $band_number = 0;
      foreach($bands as $band) {
        // Default is from the beginning to present, red fill, black border.
        $from = '0001';
        $to = $this_year;
        $fill = 'FF0000';
        $border = '000000';
        
        // Split each definition up into the separate properties.
        $properties = explode(',', $band);
        foreach ($properties as $property) {  
          // Split the property definition into a key value pair.
          $key_value = explode('=', $property);          
          // Some validation.
          if (count($key_value) != 2) {
            // Not a pair.
            continue;
          }
          if (trim($key_value[0]) == 'from') {
            $from = preg_replace("[^0-9]", "", $key_value[1]);
          }
          else if (trim($key_value[0]) == 'to') {
            $to = preg_replace("[^0-9]", "", $key_value[1]);
          }
          else if (trim($key_value[0]) == 'fill') {
            $fill = preg_replace("[^A-F0-9]", "", $key_value[1]);
          }
        } // Foreach property.
        
        // Add band to query.
        $prefix = "b$band_number";
        $query .= "&{$prefix}from=$from&{$prefix}to=$to&{$prefix}fill=$fill";
        
        $band_number++;
      } // Foreach band.
    }
  }
  // Zoom
  $query .= ($preset['settings']['zoom'] == '0') ? '' : '&zoom=' . $preset['settings']['zoom']; 
  $query .= (trim($preset['settings']['vc']) == '') ? '' : '&vc=' . trim($preset['settings']['vc']); 

  // Surrounding text
    $query .= '&title=' . $preset['settings']['title'];  
    $query .= ($preset['settings']['terms']) ? '' : '&terms=0';  
    $query .= ($preset['settings']['link']) ? '' : '&link=0';  
    $query .= ($preset['settings']['ref']) ? '' : '&ref=0';  
    $query .= ($preset['settings']['logo']) ? '' : '&logo=0';  
    
  

  return $url . $query;
}
